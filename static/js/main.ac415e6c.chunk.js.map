{"version":3,"sources":["components/Header.js","components/NewTask.js","components/Task.js","components/ActiveTasks.js","components/CompletedTasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","headerDescription","React","Component","uuidv4","require","NewTask","state","taskDescription","newTask","task","id","completed","addedTask","setState","taskDescriptionChanged","event","target","value","type","placeholder","onChange","onClick","Task","deleteTask","deleteTaskFunc","completeTask","markTaskAsCompleted","ActiveTasks","tasks","map","index","key","CompletedTasks","App","addNewTask","push","taskId","tasksToKeep","filter","updatedTasks","incompleteTasks","completedTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac415e6c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12 green\">\r\n                    {this.props.headerDescription}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nclass NewTask extends React.Component {\r\n    state = {\r\n        taskDescription: \"\"\r\n    }\r\n\r\n    newTask = () => {\r\n        const task = {\r\n            id: uuidv4(),\r\n            taskDescription: this.state.taskDescription,\r\n            completed: false\r\n        }\r\n\r\n        this.props.addedTask(task);\r\n\r\n        this.setState({ taskDescription: \"\" });\r\n    }\r\n\r\n    taskDescriptionChanged = (event) => {\r\n        let taskDescription = this.state.taskDescription;\r\n\r\n        taskDescription = event.target.value;\r\n\r\n        this.setState({ taskDescription });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-10 green\">\r\n                    <input className=\"form-control\" type=\"text\" placeholder=\"New task...\" value={this.state.taskDescription} onChange={this.taskDescriptionChanged} />\r\n                </div>\r\n                <div className=\"col-2 button\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={this.newTask}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTask;\r\n","import React from \"react\";\r\n\r\nclass Task extends React.Component {\r\n\r\n  deleteTask = () => {\r\n    this.props.deleteTaskFunc(this.props.task.id)\r\n  }\r\n\r\n  completeTask = () => {\r\n    this.props.markTaskAsCompleted(this.props.task.id)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row taskBreak\">\r\n        <div className=\"col-8 green\">\r\n          {this.props.task.taskDescription}\r\n        </div>\r\n        <div className=\"col-2 button\">\r\n          <button type=\"button\" className=\"btn btn-success\" onClick={this.completeTask}>Done</button>\r\n        </div>\r\n        <div className=\"col-2 green\">\r\n          <button type=\"button\" className=\"btn btn-danger\" onClick={this.deleteTask}\r\n          >Delete</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\n\r\n\r\n\r\n\r\nclass ActiveTasks extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.tasks.map((task, index) => {\r\n                    return <Task deleteTaskFunc={this.props.deleteTaskFunc} task={task} key={index} markTaskAsCompleted={this.props.markTaskAsCompleted}/>;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActiveTasks;","import React from 'react';\r\nimport Task from './Task';\r\n\r\n/*Tasks move to CompletedTasks.js correctly now, but they keep the format from Task.js. \r\nI think I need a new component CompletedTask.js with a similar structure to Task.js. rows and cols will live there.\r\nThen, in CompletedTasks.js, I'll have a similar structure to that in ActiveTasks.js\r\n                    return <CompletedTask task={task} key={index} />;\r\n\r\n*/\r\n\r\nclass CompletedTasks extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row taskBreak\">\r\n                <div className=\"col-10 green\">\r\n                    {this.props.tasks.map((task, index) => {\r\n                        return <Task task={task.taskDescription} key={index} />\r\n                    })}\r\n                </div>\r\n                <div className=\"col-2 button\">\r\n                    <button type=\"button\" className=\"btn btn-primary\">Activate</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedTasks;","import React from 'react';\nimport './index.css';\nimport Header from './components/Header';\nimport NewTask from './components/NewTask';\nimport ActiveTasks from './components/ActiveTasks';\nimport CompletedTasks from './components/CompletedTasks';\n\n\n\nclass App extends React.Component {\n  state = {\n    tasks: []\n  };\n\n\n  addNewTask = (task) => {\n    let tasks = this.state.tasks;\n\n    tasks.push(task);\n\n    this.setState({ tasks });\n  }\n\n  deleteTask = (taskId) => {\n    let tasks = this.state.tasks;\n    let tasksToKeep = tasks.filter(function (task) {\n      return task.id !== taskId;\n\n    });\nthis.setState({tasks: tasksToKeep})\n  }\n\n  markTaskAsCompleted = (taskId) => {\n    const updatedTasks = this.state.tasks.map(function(task) {\n      if (task.id === taskId) {\n        task.completed = true\n      }\n      return task\n    });\n\n    this.setState({ tasks: updatedTasks })\n  }\n\n  render() {\n    let incompleteTasks = this.state.tasks.filter(function (task) {\n      if (task.completed === false) {\n        return true\n      }\n    });\n\n    let completedTasks = this.state.tasks.filter(function (task) {\n      if (task.completed === true) {\n        return true\n      }\n    });\n\n    return (\n      <div className=\"container\">\n        <h1><Header headerDescription=\"Get stuff done\" /></h1>\n        <NewTask addedTask={this.addNewTask} />\n        <h2><Header headerDescription=\"Active tasks\" /></h2>\n        <ActiveTasks tasks={incompleteTasks} deleteTaskFunc={this.deleteTask} markTaskAsCompleted={this.markTaskAsCompleted}/>\n        <h2><Header headerDescription=\"Completed tasks\" /></h2>\n        <CompletedTasks tasks={completedTasks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}