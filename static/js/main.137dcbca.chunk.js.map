{"version":3,"sources":["components/Header.js","components/NewTask.js","components/Task.js","components/ActiveTasks.js","components/CompletedTask.js","components/CompletedTasks.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","headerDescription","React","Component","NewTask","require","state","taskDescription","newTask","task","completed","addedTask","setState","taskDescriptionChanged","event","target","value","type","placeholder","onChange","onSubmit","onClick","aria-hidden","Task","deleteTask","deleteTaskFunc","id","updateTask","markTaskAsCompleted","ActiveTasks","tasks","map","index","key","CompletedTask","markTaskAsActive","CompletedTasks","axios","App","addNewTask","post","then","response","push","taskId","delete","tasksToKeep","filter","put","updatedTasks","get","console","log","data","catch","error","incompleteTasks","completedTasks","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.137dcbca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12 green\">\r\n                    {this.props.headerDescription}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nconst uuidv4 = require('uuid/v4');\r\n\r\n\r\nclass NewTask extends React.Component {\r\n    state = {\r\n        taskDescription: \"\"\r\n        // creationDate: \"\"\r\n    }\r\n\r\n    //lookup 'moment' library for due date thing\r\n\r\n    newTask = () => {\r\n        const task = {\r\n            // id: uuidv4(),\r\n            taskDescription: this.state.taskDescription,\r\n            completed: \"0\"\r\n        }\r\n\r\n        this.props.addedTask(task);\r\n\r\n        this.setState({ taskDescription: \"\" });\r\n    }\r\n\r\n    taskDescriptionChanged = (event) => {\r\n        let taskDescription = this.state.taskDescription;\r\n\r\n        taskDescription = event.target.value;\r\n\r\n        this.setState({ taskDescription });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row new\">\r\n                <div className=\"col-9\">\r\n                    <input className=\"form-control\" type=\"text\" placeholder=\"New task...\" value={this.state.taskDescription} onChange={this.taskDescriptionChanged} onSubmit={this.newTask}/>\r\n                </div>\r\n                <div className=\"col-2 button\">\r\n                    <button type=\"submit\" className=\"btn btn-primary\" onClick={this.newTask}><span className=\"fas fa-plus\" aria-hidden=\"true\"></span></button>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTask;\r\n","import React from \"react\";\r\n\r\nclass Task extends React.Component {\r\n\r\n  deleteTask = () => {\r\n    this.props.deleteTaskFunc(this.props.task.id)\r\n  }\r\n\r\n  updateTask = () => {\r\n    this.props.markTaskAsCompleted(this.props.task.id, \"1\")\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row taskBreak\">\r\n        <div className=\"col-7 green\">\r\n          {this.props.task.taskDescription}\r\n        </div>\r\n        <div className=\"col-2 button\">\r\n          <button type=\"button\" className=\"btn btn-danger\" onClick={this.deleteTask}><span className=\"fas fa-trash-alt\" aria-hidden=\"true\"></span></button>\r\n        </div>\r\n        <div className=\"col-2 button\">\r\n          <button type=\"button\" className=\"btn btn-success\" onClick={this.updateTask}><span className=\"fas fa-check\" aria-hidden=\"true\"></span></button>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\n\r\n\r\n\r\n\r\nclass ActiveTasks extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.tasks.map((task, index) => {\r\n                    return <Task deleteTaskFunc={this.props.deleteTaskFunc} task={task} key={index} markTaskAsCompleted={this.props.markTaskAsCompleted}/>;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActiveTasks;","import React from \"react\";\r\n\r\nclass CompletedTask extends React.Component {\r\n\r\n\r\n  updateTask = () => {\r\n    this.props.markTaskAsActive(this.props.task.id, \"0\")\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row taskBreak completedTasks\">\r\n        <div className=\"col-8 green\">\r\n          {this.props.task.taskDescription}\r\n        </div>\r\n        <div className=\"col-2 button\">\r\n          <button type=\"button\" className=\"btn btn-primary\" onClick={this.updateTask}>Activate</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CompletedTask;","import React from 'react';\r\nimport CompletedTask from './CompletedTask';\r\n\r\n/*Tasks move to CompletedTasks.js correctly now, but they keep the format from Task.js. \r\nI think I need a new component CompletedTask.js with a similar structure to Task.js. rows and cols will live there.\r\nThen, in CompletedTasks.js, I'll have a similar structure to that in ActiveTasks.js\r\n                    return <CompletedTask task={task} key={index} />;\r\n\r\n*/\r\n\r\nclass CompletedTasks extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            {this.props.tasks.map((task, index) => {\r\n                return <CompletedTask markTaskAsActive={this.props.markTaskAsActive} task={task} key={index} />;\r\n            })}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default CompletedTasks;","import React from 'react';\nimport './index.css';\nimport Header from './components/Header';\nimport NewTask from './components/NewTask';\nimport ActiveTasks from './components/ActiveTasks';\nimport CompletedTasks from './components/CompletedTasks';\nconst axios = require('axios');\n\n\n\n\nclass App extends React.Component {\n  state = {\n    tasks: []\n  };\n\n  componentDidMount() {\n    axios.get('https://aaq6fhm1q6.execute-api.eu-west-2.amazonaws.com/dev/tasks')\n      .then((response) => {\n        // handle success\n        console.log(response)\n        this.setState({ tasks: response.data.tasks });\n      })\n      .catch((error) => {\n        // handle error\n        console.log(error);\n      });\n  }\n\n\n  addNewTask = (task) => {\n    axios.post('https://aaq6fhm1q6.execute-api.eu-west-2.amazonaws.com/dev/tasks', task)\n      .then((response) => {\n        let tasks = this.state.tasks;\n        task.id = response.id;\n        tasks.push(task);\n        this.setState({ tasks: tasks });\n      });\n  }\n\n  deleteTask = (taskId) => {\n    axios.delete(`https://aaq6fhm1q6.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}`, taskId)\n      .then((response) => {\n        let tasks = this.state.tasks;\n        let tasksToKeep = tasks.filter(function (task) {\n          return task.id !== taskId;\n        });\n        this.setState({ tasks: tasksToKeep });\n      })\n  }\n\n\n\n\n  updateTask = (taskId, completed) => {\n    axios.put(`https://aaq6fhm1q6.execute-api.eu-west-2.amazonaws.com/dev/tasks/${taskId}?completed=${completed}`, taskId)\n      .then((response) => {\n        const updatedTasks = this.state.tasks.map(function (task) {\n          if (task.id === taskId) {\n            task.completed = completed\n          }\n          return task\n        });\n        this.setState({ tasks: updatedTasks })\n      })\n  }\n\n  render() {\n    let incompleteTasks = this.state.tasks.filter(function (task) {\n      if (task.completed === \"0\") {\n        return true\n      }\n    });\n\n    let completedTasks = this.state.tasks.filter(function (task) {\n      if (task.completed === \"1\") {\n        return true\n      }\n    });\n\n    return (\n      <div className=\"container container-styles\">\n\n        <div className=\"banner\">\n          <div className=\"content\">\n            <h1>Get stuff done</h1>\n          </div>\n        </div>\n        <NewTask addedTask={this.addNewTask} />\n        {incompleteTasks.length >= 1 &&\n          <h2><Header headerDescription=\"Active tasks\" /></h2>\n        }\n        <ActiveTasks tasks={incompleteTasks} deleteTaskFunc={this.deleteTask} markTaskAsCompleted={this.updateTask} />\n        {completedTasks.length >= 1 &&\n\n          <h2><Header headerDescription=\"Completed tasks\" /></h2>\n        }\n        <CompletedTasks tasks={completedTasks} markTaskAsActive={this.updateTask} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}